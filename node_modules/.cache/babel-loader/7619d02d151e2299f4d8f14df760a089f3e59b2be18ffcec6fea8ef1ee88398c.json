{"ast":null,"code":"var _jsxFileName = \"/Users/kiminlee2000225/Documents/Code/geocache_frontend/src/GoogleMaps.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100vh'\n};\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\nfunction MapComponent() {\n  _s();\n  console.log('kimchi2');\n  const [position, setPosition] = useState({\n    lat: -3.745,\n    lng: -38.523\n  });\n  const [getMessage, setGetMessage] = useState({});\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyCuqNmuK8YHJn06WZwIkzZd2J8_XTJxpxM\"\n  });\n  const [map, setMap] = React.useState(null);\n  const [getAllPositions, setAllPositions] = useState();\n\n  // useEffect(() => {\n  //     const bounds = new window.google.maps.LatLngBounds(position);\n  //     console.log('kimchi')\n\n  //     let boundaries = {\n  //         northEastLat: bounds.getNorthEast().lat(),\n  //         northEastLng: bounds.getNorthEast().lng(),\n  //         southWestLat: bounds.getSouthWest().lat(),\n  //         southWestLng: bounds.getSouthWest().lng()\n  //     }\n  //     console.log('kimchi 4' + boundaries.northEastLng);\n  //     axios.post('http://localhost:5000/geocache', boundaries).then(response => {\n  //         console.log(\"SUCCESS\", response)\n  //         setAllPositions(response)\n  //     }).catch(error => {\n  //         console.log(error)\n  //     })\n\n  //     map.fitBounds(bounds);\n\n  //     setMap(map)\n  // }, [map])\n\n  // useEffect(() => {\n  //   // let boundaries = {northEast: , southWest: , count: }\n  //   // axios.post('http://localhost:5000/geocache', )\n\n  //   axios.get('http://localhost:5000/geocache').then(response => {\n  //     console.log(\"SUCCESSGET\", response)\n  //     setGetMessage(response)\n  //   }).catch(error => {\n  //     console.log(error)\n  //   })\n  //   console.log(getMessage);\n\n  // }, [])\n\n  // const onChange = React.useCallback(function callback(map) {\n\n  //     // This is just an example of getting and using the map instance!!! don't just blindly copy!\n  //     navigator.geolocation.getCurrentPosition((position) => {\n  //         setPosition({ lat: position.coords.latitude, lng: position.coords.longitude });\n  //         // doSomething(position.coords.latitude, position.coords.longitude);\n  //         // this should be backend call\n  //     });\n  //     const bounds = new window.google.maps.LatLngBounds(position);\n\n  //     let boundaries = {\n  //         northEastLat: bounds.getNorthEast().lat(),\n  //         northEastLng: bounds.getNorthEast().lng(),\n  //         southWestLat: bounds.getSouthWest().lat(),\n  //         southWestLng: bounds.getSouthWest().lng()\n  //     }\n  //     console.log('kimchi 5' + boundaries.northEastLng);\n  //     axios.post('http://localhost:5000/geocache', boundaries).then(response => {\n  //         console.log(\"SUCCESS\", response)\n  //         setAllPositions(response)\n  //     }).catch(error => {\n  //         console.log(error)\n  //     })\n\n  //     map.fitBounds(bounds);\n\n  //     setMap(map)\n  // }, [])\n\n  // make function that takes in waypoint and return <Marker>. Call this in GoogleMaps at the bottom of the page.\n\n  // make function that takes in a waypoint that has been selected and teh user is close enough to. Then remove that \n  // or just ignore that in the backend. Or store it in \"obtained\" data. \n\n  const onLoad = React.useCallback(async function callback(map) {\n    // This is just an example of getting and using the map instance!!! don't just blindly copy!\n    navigator.geolocation.getCurrentPosition(position => {\n      setPosition({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      // doSomething(position.coords.latitude, position.coords.longitude);\n      // this should be backend call\n    });\n\n    const bounds = new window.google.maps.LatLngBounds(position);\n    console.log('kimchi');\n    let boundaries = {\n      northEastLat: bounds.getNorthEast().lat(),\n      northEastLng: bounds.getNorthEast().lng(),\n      southWestLat: bounds.getSouthWest().lat(),\n      southWestLng: bounds.getSouthWest().lng()\n    };\n    console.log('kimchi 4' + boundaries.northEastLng);\n    // await axios.post('http://localhost:5000/geocache', boundaries).then(response => {\n    //     console.log(\"SUCCESS\", response)\n    //     setAllPositions(response)\n    // }).catch(error => {\n    //     console.log(error)\n    // })\n\n    await axios.get(`http://localhost:5000/geocache/${boundaries.northEastLat}`, {\n      params: {\n        northEastLat: boundaries.northEastLat\n      }\n    }).then(response => {\n      console.log(\"SUCCESSGET\", response);\n      setGetMessage(response);\n    }).catch(error => {\n      console.log(error);\n    });\n    console.log(getMessage);\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: position,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount\n    // onBoundsChanged={onChange}\n    ,\n    children: /*#__PURE__*/_jsxDEV(Marker, {\n      position: position,\n      clickable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(MapComponent, \"jTgolWONbjwRcJiJe+eh/tL2ItY=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = MapComponent;\nexport default _c2 = /*#__PURE__*/React.memo(MapComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"MapComponent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","useJsApiLoader","Marker","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","width","height","center","lat","lng","MapComponent","_s","console","log","position","setPosition","getMessage","setGetMessage","isLoaded","id","googleMapsApiKey","map","setMap","getAllPositions","setAllPositions","onLoad","useCallback","callback","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","bounds","window","google","maps","LatLngBounds","boundaries","northEastLat","getNorthEast","northEastLng","southWestLat","getSouthWest","southWestLng","get","params","then","response","catch","error","fitBounds","onUnmount","mapContainerStyle","zoom","children","clickable","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["/Users/kiminlee2000225/Documents/Code/geocache_frontend/src/GoogleMaps.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\nimport axios from 'axios'\n\nconst containerStyle = {\n    width: '100%',\n    height: '100vh',\n};\n\nconst center = {\n    lat: -3.745,\n    lng: -38.523\n};\n\nfunction MapComponent() {\n    console.log('kimchi2')\n    const [position, setPosition] = useState({\n        lat: -3.745,\n        lng: -38.523\n    })\n    const [getMessage, setGetMessage] = useState({})\n    const { isLoaded } = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: \"AIzaSyCuqNmuK8YHJn06WZwIkzZd2J8_XTJxpxM\"\n    })\n\n    const [map, setMap] = React.useState(null)\n    const [getAllPositions, setAllPositions] = useState()\n\n    // useEffect(() => {\n    //     const bounds = new window.google.maps.LatLngBounds(position);\n    //     console.log('kimchi')\n\n    //     let boundaries = {\n    //         northEastLat: bounds.getNorthEast().lat(),\n    //         northEastLng: bounds.getNorthEast().lng(),\n    //         southWestLat: bounds.getSouthWest().lat(),\n    //         southWestLng: bounds.getSouthWest().lng()\n    //     }\n    //     console.log('kimchi 4' + boundaries.northEastLng);\n    //     axios.post('http://localhost:5000/geocache', boundaries).then(response => {\n    //         console.log(\"SUCCESS\", response)\n    //         setAllPositions(response)\n    //     }).catch(error => {\n    //         console.log(error)\n    //     })\n\n\n    //     map.fitBounds(bounds);\n\n    //     setMap(map)\n    // }, [map])\n\n    // useEffect(() => {\n    //   // let boundaries = {northEast: , southWest: , count: }\n    //   // axios.post('http://localhost:5000/geocache', )\n\n\n    //   axios.get('http://localhost:5000/geocache').then(response => {\n    //     console.log(\"SUCCESSGET\", response)\n    //     setGetMessage(response)\n    //   }).catch(error => {\n    //     console.log(error)\n    //   })\n    //   console.log(getMessage);\n\n    // }, [])\n\n    // const onChange = React.useCallback(function callback(map) {\n\n\n    //     // This is just an example of getting and using the map instance!!! don't just blindly copy!\n    //     navigator.geolocation.getCurrentPosition((position) => {\n    //         setPosition({ lat: position.coords.latitude, lng: position.coords.longitude });\n    //         // doSomething(position.coords.latitude, position.coords.longitude);\n    //         // this should be backend call\n    //     });\n    //     const bounds = new window.google.maps.LatLngBounds(position);\n\n    //     let boundaries = {\n    //         northEastLat: bounds.getNorthEast().lat(),\n    //         northEastLng: bounds.getNorthEast().lng(),\n    //         southWestLat: bounds.getSouthWest().lat(),\n    //         southWestLng: bounds.getSouthWest().lng()\n    //     }\n    //     console.log('kimchi 5' + boundaries.northEastLng);\n    //     axios.post('http://localhost:5000/geocache', boundaries).then(response => {\n    //         console.log(\"SUCCESS\", response)\n    //         setAllPositions(response)\n    //     }).catch(error => {\n    //         console.log(error)\n    //     })\n\n\n    //     map.fitBounds(bounds);\n\n    //     setMap(map)\n    // }, [])\n\n    // make function that takes in waypoint and return <Marker>. Call this in GoogleMaps at the bottom of the page.\n\n    // make function that takes in a waypoint that has been selected and teh user is close enough to. Then remove that \n    // or just ignore that in the backend. Or store it in \"obtained\" data. \n\n\n    const onLoad = React.useCallback(async function callback(map) {\n\n        // This is just an example of getting and using the map instance!!! don't just blindly copy!\n        navigator.geolocation.getCurrentPosition((position) => {\n            setPosition({ lat: position.coords.latitude, lng: position.coords.longitude });\n            // doSomething(position.coords.latitude, position.coords.longitude);\n            // this should be backend call\n        });\n        const bounds = new window.google.maps.LatLngBounds(position);\n        console.log('kimchi')\n\n        let boundaries = {\n            northEastLat: bounds.getNorthEast().lat(),\n            northEastLng: bounds.getNorthEast().lng(),\n            southWestLat: bounds.getSouthWest().lat(),\n            southWestLng: bounds.getSouthWest().lng()\n        }\n        console.log('kimchi 4' + boundaries.northEastLng);\n        // await axios.post('http://localhost:5000/geocache', boundaries).then(response => {\n        //     console.log(\"SUCCESS\", response)\n        //     setAllPositions(response)\n        // }).catch(error => {\n        //     console.log(error)\n        // })\n\n        await axios.get(`http://localhost:5000/geocache/${boundaries.northEastLat}`, {\n        params: {\n            northEastLat: boundaries.northEastLat,\n        }}).then(response => {\n            console.log(\"SUCCESSGET\", response)\n            setGetMessage(response)\n        }).catch(error => {\n            console.log(error)\n        })\n        console.log(getMessage);\n\n        map.fitBounds(bounds);\n\n        setMap(map)\n    }, [])\n\n    const onUnmount = React.useCallback(function callback(map) {\n        setMap(null)\n    }, [])\n\n    return isLoaded ? (\n        <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={position}\n            zoom={10}\n            onLoad={onLoad}\n            onUnmount={onUnmount}\n        // onBoundsChanged={onChange}\n        >\n            { /* Child components, such as markers, info windows, etc. */}\n            {/* {getMessage.map(waypoint => {\n                return <Marker key={waypoint.name} position={waypoint.position} clickable={true}/>;\n            })} */}\n            {<Marker position={position} clickable={true} />}\n        </GoogleMap>\n    ) : <></>\n}\n\nexport default React.memo(MapComponent)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}